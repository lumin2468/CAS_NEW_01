<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="shortcut icon" href="assets/images/favicon.png">
    <link rel="stylesheet" href="assets/css/core/libs.min.css">
    <link rel="stylesheet" href="assets/css/qompac-ui.minf700.css?v=1.0.1">
    <link rel="stylesheet" href="assets/css/custom.minf700.css?v=1.0.1">
    <link rel="stylesheet" href="assets/css/dark.minf700.css?v=1.0.1">
    <link rel="stylesheet" href="assets/css/customizer.minf700.css?v=1.0.1" >
    <link rel="stylesheet" href="assets/css/rtl.minf700.css?v=1.0.1">
</head>
<body>

<% if (designation === "ACCOUNTANT") { %>
    <%- include('../Includes/sidebar3.ejs') %>
    <%- include('../Includes/header-5.ejs') %>
<% } else { %>
    <%- include('../Includes/sidebar2.ejs') %>
    <%- include('../Includes/header-4.ejs') %>
<% } %>

<div class="content-inner container-fluid pb-0" id="page_layout">
    <div class="flex-wrap d-flex justify-content-between align-items-center">
        <div><h4 class="mb-5">Cash Book Register</h4></div>
        <div>
            <select class="form-control" id="schemeSelect">
                <option>Select Scheme</option>
                <% for (let sch of districtDetails.schemes) { %>
                    <option value="<%= sch._id %>"><%= sch.name %></option>
                <% } %>
            </select>
        </div>
        <div>
            <select class="form-control" id="filterType">
                <option value="financialYear">Financial Year</option>
                <option value="monthly">Monthly</option>
                <option value="dateRange">Date Range</option>
            </select>
            <select class="form-control" id="financialYearFilter">
                <option>Select</option>
                <% for (let year of financialYear) { %>
                    <option value="<%= year._id %>"><%= year.year %></option>
                <% } %>
            </select>
            <select class="form-control" id="monthFilter" style="display: none;">
                <option>SELECT</option>
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
                <!-- Add more months as needed -->
            </select>
            <div style="display: flex; flex-direction: row;">
                <input type="date" id="startDateInput" style="display: none;">
                <input type="date" id="endDateInput" style="display: none;">
            </div>
        </div>
    </div>

    <!-- Add a container to display selected schemes -->
    <div>
        <h5>Selected Schemes:</h5>
        <ul id="selectedSchemesList">
            <!-- Selected schemes will be displayed here -->
        </ul>
    </div>

    <div>
        <!-- Add a checkbox for selecting all schemes -->
        <input type="checkbox" id="selectAllSchemes"> Select All Schemes
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th colspan="4" class="text-center">Receipt/Income</th>
                            <th colspan="4" class="text-center">Payment/Expenditure</th>
                        </tr>
                        <tr>
                            <th>Month & Date</th>
                            <th>Particulars</th>
                            <th>Cash</th>
                            <th>Bank</th>
                            <th>Particulars</th>
                            <th>Voucher No.</th>
                            <th>Cash</th>
                            <th>Bank</th>
                        </tr>
                    </thead>
                    <tbody id="cashBookTableBody">
                        <!-- Rows for displaying data will be added here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<%- include('../Includes/footer.ejs') %>

<%- include('../Includes/footer.ejs') %>

<script>
    const schemeSelect = document.getElementById('schemeSelect');
    const filterTypeSelect = document.getElementById('filterType');
    const financialYearFilterSelect = document.getElementById('financialYearFilter');
    const monthFilterSelect = document.getElementById('monthFilter');
    const startDateInput = document.getElementById('startDateInput');
    const endDateInput = document.getElementById('endDateInput');
    const selectedSchemesList = document.getElementById('selectedSchemesList');
    const selectAllSchemes = document.getElementById('selectAllSchemes');
    const cashBookTableBody = document.getElementById('cashBookTableBody');

    // Store selected schemes in an array
    const selectedSchemes = [];

    schemeSelect.addEventListener('change', () => {
        const selectedSchemeId = schemeSelect.value;
        const selectedSchemeName = schemeSelect.options[schemeSelect.selectedIndex].text;

        // Check if the scheme is already selected
        if (!selectedSchemes.includes(selectedSchemeId)) {
            selectedSchemes.push(selectedSchemeId);
            // Add the selected scheme to the list
            const listItem = document.createElement('li');
            listItem.textContent = selectedSchemeName;
            // Add a click event to remove the scheme when clicked
            listItem.addEventListener('click', () => {
                removeScheme(selectedSchemeId, listItem);
            });
            selectedSchemesList.appendChild(listItem);
        }
    });

    // Function to remove a selected scheme
    function removeScheme(schemeId, listItem) {
        const index = selectedSchemes.indexOf(schemeId);
        if (index !== -1) {
            selectedSchemes.splice(index, 1);
            selectedSchemesList.removeChild(listItem);
        }
    }

    async function fetchData(schemeIds, startDate, endDate, financialYearId) {
        let url = `/cas/district/report/data?selectedSchemes=${schemeIds}&filterType=${filterTypeSelect.value}`;

        if (financialYearId) {
            url += `&financialYear=${financialYearId}`;
        } else if (startDate && endDate) {
            url += `&startDate=${startDate}&endDate=${endDate}`;
        }

        const response = await fetch(url);
        return response.json();
    }

    // Handle the "Select All Schemes" checkbox
    selectAllSchemes.addEventListener('change', () => {
        if (selectAllSchemes.checked) {
            // Clear the selected schemes array and the list
            selectedSchemes.length = 0;
            selectedSchemesList.innerHTML = '';

            // Select all schemes from the dropdown
            const schemeOptions = schemeSelect.options;
            for (let i = 1; i < schemeOptions.length; i++) {
                const schemeId = schemeOptions[i].value;
                const schemeName = schemeOptions[i].text;
                selectedSchemes.push(schemeId);

                // Add the selected scheme to the list
                const listItem = document.createElement('li');
                listItem.textContent = schemeName;
                // Add a click event to remove the scheme when clicked
                listItem.addEventListener('click', () => {
                    removeScheme(schemeId, listItem);
                });
                selectedSchemesList.appendChild(listItem);
            }
        } else {
            // Uncheck "Select All Schemes"
            selectedSchemes.length = 0;
            selectedSchemesList.innerHTML = '';
        }
    });

    filterTypeSelect.addEventListener('change', () => {
        updateFilterDisplay();
        fetchDataAndUpdateTable();
    });

    financialYearFilterSelect.addEventListener('change', () => {
        fetchDataAndUpdateTable();
    });

    monthFilterSelect.addEventListener('change', () => {
        fetchDataAndUpdateTable();
    });

    startDateInput.addEventListener('change', () => {
        fetchDataAndUpdateTable();
    });

    endDateInput.addEventListener('change', () => {
        fetchDataAndUpdateTable();
    });

    const fetchDataAndUpdateTable = async () => {
        const schemeId = selectedSchemes.join(','); // Comma-separated list of selected schemes
        const selectedFilter = filterTypeSelect.value;

        if (selectedFilter === 'financialYear') {
            const financialYearId = financialYearFilterSelect.value;
            const response = await fetchData(schemeId, null, null, financialYearId);
            console.log(response);
            populateCashBookTable(response);
        } else if (selectedFilter === 'monthly') {
            const month = monthFilterSelect.value;
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const response = await fetchData(schemeId, year + '-' + month + '-01', year + '-' + (parseInt(month) + 1) + '-01');
            populateCashBookTable(response);
        } else if (selectedFilter === 'dateRange') {
            const startDate = encodeURIComponent(startDateInput.value);
            const endDate = encodeURIComponent(endDateInput.value);
            const response = await fetchData(schemeId, startDate, endDate, null);
            populateCashBookTable(response);
        }
    };

    const updateFilterDisplay = () => {
        const selectedFilter = filterTypeSelect.value;

        if (selectedFilter === 'financialYear') {
            financialYearFilterSelect.style.display = 'block';
            monthFilterSelect.style.display = 'none';
            startDateInput.style.display = 'none';
            endDateInput.style.display = 'none';
        } else if (selectedFilter === 'monthly') {
            financialYearFilterSelect.style.display = 'none';
            monthFilterSelect.style.display = 'block';
            startDateInput.style.display = 'none';
            endDateInput.style.display = 'none';
        } else if (selectedFilter === 'dateRange') {
            financialYearFilterSelect.style.display = 'none';
            monthFilterSelect.style.display = 'none';
            startDateInput.style.display = 'block';
            endDateInput.style.display = 'block';
        }
    };

    // Function to populate the Cash Book Register table with data
    const populateCashBookTable = (data) => {
    // Extract and sort the dates
    const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));

    // Clear existing rows
    cashBookTableBody.innerHTML = '';

    // Loop through the sorted dates
    for (const date of sortedDates) {
        const entries = data[date];

        // Check if there are payment records for this date
        if (entries.payments) {
            for (const payment of entries.payments) {
                const row = createTableRow(date, payment);
                cashBookTableBody.appendChild(row);
            }
        }

        // Check if there are receipt records for this date
        if (entries.receipts) {
            for (const receipt of entries.receipts) {
                const row = createTableRow(date, receipt);
                cashBookTableBody.appendChild(row);
            }
        }

        // Check if there are advance records for this date
        if (entries.advances) {
            for (const advance of entries.advances) {
                const row = createTableRow(date, advance);
                cashBookTableBody.appendChild(row);
            }
        }
    }

    // Update other parts of the table as needed, such as totals and closing balance
};

// Function to create a table row for an entry
function createTableRow(date, receipt, payment, advance) {
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${date}</td>
        <td>${receipt ? receipt.desc : (payment ? payment.components_name : (advance ? advance.desc : ''))}</td>
        <td>${receipt ? receipt.amount : (payment ? payment.amount : (advance ? advance.amount : ''))}</td>
        <td>${receipt ? (receipt.receiver_bank ? receipt.receiver_bank.bankName : '') : (payment ? (payment.from_bank ? payment.from_bank.bankName : '') : (advance ? (advance.to_bank ? advance.to_bank : '') : ''))}</td>
        <td>${receipt ? receipt.source_bank_details : ''}</td>
        <td>${receipt ? receipt.autoVoucherNo : (payment ? payment.autoVoucherNo : (advance ? advance.autoVoucherNo : ''))}</td>
        <td>${receipt ? receipt.amount : (payment ? payment.amount : (advance ? advance.amount : ''))}</td>
        <td>${receipt ? (receipt.receiver_bank ? receipt.receiver_bank.bankName : '') : (payment ? (payment.from_bank ? payment.from_bank.bankName : '') : (advance ? (advance.from_bank ? advance.from_bank : '') : ''))}</td>
    `;
    return row;
}
    
</script>

</body>
</html>
